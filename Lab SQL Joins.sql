-- 1. List the number of films per category.
Select name, c.category_id, count(1) as "number of film"
from film_category fc
inner join film f
on f.film_id = fc.film_id
inner join category c
on c.category_id = fc.category_id
group by 1,2;

-- 2. Retrieve the store ID, city, and country for each store.
select store_ID, city, country
from store st
inner join address ad
on st.address_id = ad.address_id
inner join city ct
on ad.city_id = ct.city_id
inner join country cy
on ct.country_id = cy.country_id;

-- 3.  Calculate the total revenue generated by each store in dollars.
select store.store_id, sum(amount)
from store
inner join staff
on store.store_id = staff.store_id
inner join payment p
on staff.staff_id = p.staff_id
group by 1;

-- 4.  Determine the average running time of films for each category.
Select name, avg(length)
from category c
inner join film_category fc
on c.category_id = fc.category_id
inner join film f
on fc.film_id = f.film_id
group by 1;

-- 5.  Identify the film categories with the longest average running time.
Select name, avg(length)
from category c
inner join film_category fc
on c.category_id = fc.category_id
inner join film f
on fc.film_id = f.film_id
group by name
order by avg(length) desc;

-- 6.  Display the top 10 most frequently rented movies in descending order.
select title, count(1) as "number of rental"
from rental r
left join inventory i
on i.inventory_id = r.inventory_id
left join film f
on f.film_id = i.film_id
group by 1
order by count(1) desc
limit 10;

-- 7. Determine if "Academy Dinosaur" can be rented from Store 1.
select title, st.store_id
from store st
left join inventory i 
on st.store_id = i.store_id
left join film f
on i.film_id = f.film_id
where title like "academy dinosaur";